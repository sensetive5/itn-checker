{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Функция проверяет корректность ИНН номера\n * @param {String|Number} innNumber\n * @return {Boolean}\n */\nexport function checkItn (innNumber: string | number): boolean {\n  const itnNumber = typeof innNumber === 'number'\n    ? innNumber.toString()\n    : innNumber;\n\n  if (!isCorrectNumber(itnNumber))\n    throw new Error ('INN number should contain only digits');\n\n  if (!isCorrectLength(itnNumber))\n    throw new Error ('INN length should be 10 or 12');\n\n  switch (getLength(itnNumber)) {\n    case 10:\n    \treturn checkTenInnNumber(itnNumber);\n    case 12:\n      return checkTwelveInnNumber(itnNumber);\n  }\n}\n\n/**\n * Проверяет длинну ИНН номера\n * @param {String} innNumber\n * @return {Boolean}\n */\nfunction isCorrectLength (innNumber = ''): boolean {\n  const CORRECT_LENGTHS = [10, 12];\n  return CORRECT_LENGTHS.includes(getLength(innNumber));\n}\n\n/**\n * Проверяет условие, чтобы в номере не было букв\n * @param {String} innNumber\n * @return {Boolean}\n */\nfunction isCorrectNumber (innNumber = ''): boolean {\n  return innNumber\n    .split('')\n    .every(number => isNaN(parseInt(number)) === false);\n}\n\n/**\n * Возвращает длинну ИНН номера\n * @param {String} innNumber\n * @return {Number}\n */\nfunction getLength (innNumber = ''): number {\n  return innNumber.length;\n}\n\n/**\n * Проверяет ИНН на валидность\n * @param {String} innNumber\n * @param {Number[]} multiplicators\n * @param {Boolean} isTwelve\n */\nfunction checkNumber (\n  innNumber = '',\n  multiplicators: number[] = [],\n  isTwelve = false\n): boolean {\n  const DIVIDER = 11;\n\n  const lastNumber = getLastNumber(innNumber, isTwelve);\n  const checkSum = getCheckSum(innNumber, multiplicators, isTwelve);\n  const preparedCheckSum = prepareCheckSum(checkSum, DIVIDER);\n  return compareCheckSums(checkSum, preparedCheckSum) === lastNumber;\n}\n\n/**\n * Проверяет десятизначный ИНН номер на корректность\n * @param {String} innNumber\n * @return {Boolean}\n */\nfunction checkTenInnNumber (innNumber = ''): boolean {\n  const TEN_INN_NUMBER_MULTIPLICATORS = [2, 4, 10, 3, 5, 9, 4, 6, 8];\n\n  return checkNumber(innNumber, TEN_INN_NUMBER_MULTIPLICATORS);\n}\n\n/**\n * Проверяет двенадцатизначный ИНН номер на корректность\n * @param {String} innNumber\n * @return {Boolean}\n */\nfunction checkTwelveInnNumber (innNumber = ''): boolean {\n  const TWELVE_INN_NUMBER_MULTIPLICATORS_PART_1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8];\n\n  const firstCheckResult = checkNumber(innNumber, TWELVE_INN_NUMBER_MULTIPLICATORS_PART_1, true)\n\n  if (!firstCheckResult)\n  \treturn firstCheckResult;\n\n  const TWELVE_INN_NUMBER_MULTIPLICATORS_PART_2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8];\n  return checkNumber(innNumber, TWELVE_INN_NUMBER_MULTIPLICATORS_PART_2);\n}\n\n/**\n * Возвращает контрольную сумму ИНН чисел\n * @param {String} innNumber\n * @param {Number[]} multiplicators\n * @param {Boolean} isTwelve\n * @return {Number}\n */\n\nfunction getCheckSum (\n  innNumber = '',\n  multiplicators: number[] = [],\n  isTwelve = false\n): number {\n  const preparedInnNumber = prepareInnNumber(innNumber, isTwelve);\n  return preparedInnNumber.reduce((sum, number, idx) => sum + (number * multiplicators[idx]), 0);\n}\n\n/**\n * Преобразовывает ИНН номер в валидный для проверки,\n * отсекая последний знак или два последних знака (для 12 значных ИНН)\n *\n * @param {String} innNumber\n * @param {Boolean} isTwelve\n * @return {Number[]}\n */\nfunction prepareInnNumber (innNumber = '', isTwelve = false) {\n  const howMany = isTwelve\n    ? -2\n    : -1;\n\n  return innNumber\n    .split('')\n    .slice(0, howMany)\n    .map(number => +number);\n}\n\n/**\n * Берет последние или предпоследние число в ИНН\n * в зависимости от длинны номера\n *\n * @param {String} innNumber\n * @param {Boolean} isTwelve\n * @returns {Number}\n */\nfunction getLastNumber (\n  innNumber = '',\n  isTwelve = false\n): number {\n  return isTwelve\n    ? +innNumber.split('').slice(-2, -1).pop()\n    : +innNumber.split('').slice(-1).pop()\n}\n\n/**\n * Подготавливает контрольную сумму\n *\n * @param {Number} sum\n * @param {Number} divider\n * @return {Number}\n */\nfunction prepareCheckSum (\n  sum = 0,\n  divider = 1\n): number {\n  return (Math.trunc(sum / divider)) * divider;\n}\n\n/**\n * Результат сравнения двух контрольных сумм\n *\n * @param {Number} originalCheckSum\n * @param {Number} preparedCheckSum\n * @return {Number}\n */\nfunction compareCheckSums (\n  originalCheckSum = 0,\n  preparedCheckSum = 0\n): number {\n  const difference = originalCheckSum - preparedCheckSum;\n  return difference === 10\n    ? 0\n    : difference;\n}\n"],"names":["checkItn","innNumber","itnNumber","toString","split","every","number","isNaN","parseInt","isCorrectNumber","Error","includes","getLength","isCorrectLength","checkNumber","checkTenInnNumber","firstCheckResult","checkTwelveInnNumber","length","multiplicators","isTwelve","lastNumber","slice","pop","getLastNumber","checkSum","howMany","map","prepareInnNumber","reduce","sum","idx","getCheckSum","originalCheckSum","preparedCheckSum","difference","compareCheckSums","divider","Math","trunc","prepareCheckSum"],"mappings":"SAKgBA,EAAUC,GACxB,IAAMC,EAAiC,iBAAdD,EACrBA,EAAUE,WACVF,EAEJ,IA6BF,SAA0BA,gBAAAA,MACxB,OAAOA,EACJG,MAAM,IACNC,OAAM,SAAAC,GAAU,OAA4B,IAA5BC,MAAMC,SAASF,OAhC7BG,CAAgBP,GACnB,MAAM,IAAIQ,MAAO,yCAEnB,IAgBF,SAA0BT,gBAAAA,MAExB,MADwB,CAAC,GAAI,IACNU,SAASC,EAAUX,IAlBrCY,CAAgBX,GACnB,MAAM,IAAIQ,MAAO,iCAEnB,OAAQE,EAAUV,IAChB,KAAK,GACJ,OA4DL,SAA4BD,gBAAAA,MAG1B,OAAOa,EAAYb,EAFmB,CAAC,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,IA7DtDc,CAAkBb,GAC1B,KAAK,GACH,OAqEN,SAA+BD,gBAAAA,MAC7B,IAEMe,EAAmBF,EAAYb,EAFW,CAAC,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,IAEY,GAEzF,OAAKe,EAIEF,EAAYb,EAD6B,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,IAFxEe,EA3EGC,CAAqBf,IA8BlC,SAASU,EAAWX,GAClB,oBADkBA,MACXA,EAAUiB,OASnB,SAASJ,EACPb,EACAkB,EACAC,gBAFAnB,mBACAkB,mBACAC,MAEA,IAEMC,EA8ER,SACEpB,EACAmB,gBADAnB,mBACAmB,MAEA,OAAOA,GACFnB,EAAUG,MAAM,IAAIkB,OAAO,GAAI,GAAGC,OAClCtB,EAAUG,MAAM,IAAIkB,OAAO,GAAGC,MApFhBC,CAAcvB,EAAWmB,GACtCK,EAyCR,SACExB,EACAkB,EACAC,gBAFAnB,mBACAkB,mBACAC,MAGA,OAWF,SAA2BnB,EAAgBmB,gBAAhBnB,mBAAgBmB,MACzC,IAAMM,EAAUN,GACX,GACA,EAEL,OAAOnB,EACJG,MAAM,IACNkB,MAAM,EAAGI,GACTC,KAAI,SAAArB,GAAU,OAACA,KApBQsB,CAAiB3B,EAAWmB,GAC7BS,QAAO,SAACC,EAAKxB,EAAQyB,GAAQ,OAAAD,EAAOxB,EAASa,EAAeY,KAAO,GA/C3EC,CAAY/B,EAAWkB,EAAgBC,GAExD,OAyGF,SACEa,EACAC,gBADAD,kBACAC,KAEA,IAAMC,EAAaF,EAAmBC,EACtC,OAAsB,KAAfC,EACH,EACAA,EAhHGC,CAAiBX,EA2F1B,SACEK,EACAO,gBADAP,kBACAO,KAEA,OAAQC,KAAKC,MAAMT,EAAMO,GAAYA,EAhGZG,CAAgBf,EAJzB,OAKwCJ"}